#!/bin/bash -x

set -e

[# th:if = "${variablesMap.get('local').equals('false')}"]# --- SGE options --- #

#$ -V
#$ -wd [(${variablesMap.get('outdir')})]
#$ -N [(${variablesMap.get('fileName')})]
#$ -o [(${variablesMap.get('outdir')})]/log_files/[(${variablesMap.get('fileName')})].log
#$ -e [(${variablesMap.get('outdir')})]/err_files/[(${variablesMap.get('fileName')})].err
#$ -q [(${variablesMap.get('queue')})]
#$ -R y
[# th:if = "${variablesMap.get('sync').equals('true')}"]#$ -sync y
[/]
[/][# th:unless = "${variablesMap.get('local').equals('false')}"]# --- Local machine options --- #

exec 1> [(${variablesMap.get('outdir')})]/log_files/[(${variablesMap.get('fileName')})].log
exec 2> [(${variablesMap.get('outdir')})]/err_files/[(${variablesMap.get('fileName')})].err

[/]# --- The commands to be executed --- #

cd [(${variablesMap.get('outdir')})]

log_info "Begin the jobs execution."

function log_info() {
    LOG_TEXT="$1"
    LOG_TASK="Fonda"
    if command -v pipe_log_info &> /dev/null
    then
        pipe_log_info "$LOG_TEXT" "$LOG_TASK"
    else
        echo `date` "$LOG_TEXT"
    fi
}

R=$(echo $RANDOM)
[# th:if = "${variablesMap.get('local').equals('false')}"]function qsub_script() {
    local script="$1"
    job="$(qsub $script)"
    log_info "$job"
    job_id="$(echo "$job" | sed -n '1s|.*\s\([0-9]*\)\s.*|\1|p')"
    if [ -z "$job_id" ]; then
        job_id="$(qstat -j $script | grep 'job_number' | grep -o '[0-9]*')"
        if [ -z "$job_id" ]; then
            log_info "[ERROR] Could not get job id from job $job. Exiting"
            if [ ! -f [(${variablesMap.get('outdir')})]/err_files/failure_$R.err ]; then
                touch [(${variablesMap.get('outdir')})]/err_files/failure_$R.err
            fi
            exit 1
        fi
    fi
    while [ "$(qacct -j "$job_id" | grep jobnumber | grep -o '[0-9]*')" != "$job_id" ]
    do
        sleep 1
    done
    status="$(qacct -j "$job_id" | grep exit_status | grep -o '[0-9]*')"
    return $status
}[/]

function launch_script() {
    local script="$1"
    log_info "Start script execution $script"
    [# th:if = "${variablesMap.get('local').equals('false')}"]qsub_script $script[/]
    [# th:unless = "${variablesMap.get('local').equals('false')}"]bash $script[/]
    status=$?
    if [ $status -eq 0 ]
    then
        log_info "Successful step: $script script execution is completed."
    else
        log_info "Error step: $script script execution is completed with $status status."
        if [ ! -f [(${variablesMap.get('outdir')})]/err_files/failure_$R.err ]; then
            touch [(${variablesMap.get('outdir')})]/err_files/failure_$R.err
        fi
        exit "$status"
    fi
}

function check_current_status() {
    if [ -f [(${variablesMap.get('outdir')})]/err_files/failure_$R.err ]; then
        log_info "Master job was aborted due to ERRORS found."
        rm -f [(${variablesMap.get('outdir')})]/err_files/failure_$R.err
        exit 1
    fi
}

function process_scripts_launch() {
    [# th:each = "sampleScripts : ${samplesProcessScripts}"][# th:each = "s : ${sampleScripts.baseScripts}"]launch_script [(${s})]
    [/][# th:if = "${#arrays.length(sampleScripts.secondaryScripts) > 1}"]( [# th:each = "s : ${sampleScripts.secondaryScripts}"]launch_script [(${s})] [/]wait ) &[/] [# th:if = "${#arrays.length(sampleScripts.secondaryScripts) == 1}"][# th:each = "s : ${sampleScripts.secondaryScripts}"]launch_script [(${s})][/][/]
    [/]wait
    check_current_status
}

[# th:if = "${#arrays.length(postProcessScripts) >= 1}"]function post_process_scripts_launch() {
    [# th:each="script : ${postProcessScripts}"]launch_script [(${script})] &
    [/]wait
    check_current_status
}[/]

process_scripts_launch[# th:if = "${#arrays.length(postProcessScripts) >= 1}"] && \
post_process_scripts_launch[/]

log_info "All jobs have been completed."
