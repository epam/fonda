plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'pmd'
    id 'checkstyle'
    id 'jacoco'
    id 'org.sonarqube' version "2.6.1"
}

group 'com.epam'

def buildNumber = hasProperty("buildNumber") ? buildNumber : ""
version = new Version(major: 2, minor: 0, patch: 0, build: buildNumber)

class Version {
    int major, minor, patch
    String build

    String toString() {
        "$major.$minor.$patch${build ? ".$build" : ''}"
    }
}

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

jar {
    manifest {
        attributes 'Main-Class': 'com.epam.fonda.Main'
    }

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task copySrc(type: Copy, dependsOn: 'build') {
    group = 'build'
    copy {
        from "$project.projectDir/src/main/python"
        into "$project.buildDir/libs/src/python"
    }

    copy {
        from "$project.projectDir/src/main/R"
        into "$project.buildDir/libs/src/R"
    }
}

task zip(type: Zip, dependsOn: ['build', 'copySrc']) {
    version = project.version
    group = 'build'
    archiveName "fonda-${version}.zip"
    from "$project.buildDir/libs"
}

configurations {
    integrationTestCompile { extendsFrom testCompile }
    integrationTestRuntime { extendsFrom testRuntime }
}

dependencies {
    compile group: 'commons-cli', name: 'commons-cli', version: versionCommonsCli
    compile group: 'commons-io', name: 'commons-io', version: versionCommonsIo
    compile group: 'org.apache.commons', name: 'commons-lang3', version: versionCommonsLang3
    compile group: 'org.thymeleaf', name: 'thymeleaf', version: versionThymeleaf
    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: versionLog4jSlf4jImpl
    compile group: 'org.apache.commons', name: 'commons-collections4', version: versionApacheCommons
    compile group: 'com.beust', name: 'jcommander', version: versionJcommander
    compileOnly group: 'org.projectlombok', name: 'lombok', version: versionLombok

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versionJunitJupiterApi
    testRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versionJunitJupiterEngine
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: versionJunitParams
    testCompileOnly group: 'org.projectlombok', name: 'lombok', version: versionLombok
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir 'src/integrationTest/java'
        }
    }
}
task integrationTest(type: Test) {
    useJUnitPlatform()
    description 'Runs all integration tests in project'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath

    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/integrationTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
}
build.dependsOn integrationTest
check.dependsOn integrationTest

idea {
    module {
        testSourceDirs += project.sourceSets.integrationTest.java.srcDirs
        testSourceDirs += project.sourceSets.integrationTest.resources.srcDirs
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "SKIPPED", "FAILED"
        showStandardStreams = true
    }
}

jacoco{
    toolVersion = "0.8.4"
}

jacocoTestCoverageVerification {
    executionData project.tasks.integrationTest
    violationRules {
        rule {
            element = 'CLASS'
            excludes = ['com.epam.fonda.workflow.Workflow',
                        'com.epam.fonda.OptionNames',
                        'com.epam.fonda.Main',
                        'com.epam.fonda.Executor']
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification

pmd {
    ruleSetFiles = files("$rootDir/config/pmd/pmd-ruleset.xml")
}

jacocoTestReport {
    executionData file("$buildDir/jacoco/integrationTest.exec")
    reports {
        xml.enabled true
        html.enabled true
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.10.2'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}
